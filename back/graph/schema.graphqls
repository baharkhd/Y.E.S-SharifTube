type User {
    id: ID!
    username: String! # uniqe
    password: String!
    name: String
    email: String
    courses: [Course!]
}

type Course {
    id: ID!
    title: String!
    summary: String
    createdAt: Int!
    prof: User!
    tas: [User!]
    pends: [Pending!]
    students: [User!]
    contents: [Content!]
    inventory: [Attachment!]
}

enum Status{
    PENDING
    ACCEPTED
    REJECTED
}

type Pending{
    id: ID!
    title: String!
    description: String
    status: Status!
    uploadedBY: User!
    furl: String! #todo better implementation for file
    course: Course!
}

type Content{
    id: ID!
    title: String!
    description: String
    timestamp: Int!
    uploadedBY: User!
    approvedBY: User
    vurl: String! #todo better implementation for video file
    comments: [Comment!]
    tags: [String!]
    course: Course!
}

type Attachment{
    id: ID!
    name: String!
    aurl: String! #todo better implementation for attachment file
    description: String
    timestamp: Int!
    course: Course!
}

type Comment{
    id: ID!
    author: User!
    body: String!
    timestamp: Int!
    replies: [Reply!]
    content: Content!
}

type Reply{
    id: ID!
    author: User!
    body: String!
    timestamp: Int!
    comment: Comment!
}

input UserFilter{
    username: String
    courseID: String # search for users inside a course
}

input CourseFilter{
    keyWord: String # search in title, summery, title of contents & description of contents
    memberID: String # search by id of user
    memberUsername: [String!] # search by username of user
    tags: [String!] # search by tags of contents
}

input ContentFilter{
    keyWord: String # search in title & description
    courseID: String # get videos of a course
    uploaderID: String
    uploaderUsername: String
    tags: [String!]
}

input CommentFilter{
    contentID: String
    commentID: String # get comments by ID of replied comment
    authorID: String
    authorUsername: String
}

input PendingFilter{
    courseID: String
    status: Status
    uploaderID: String
    uploaderUsername: String
}

type Query {
    user(id: String): User!
    users(start: Int!=0, amount: Int!=5): [User!]!
    userByFilter(filter:UserFilter!, start:Int!=0, amount:Int!=5): [Course!]!

    course(id: String!): Course!
    courses(start: Int!=0, amount: Int!=5): [Course!]!
    courseByFilter(filter: CourseFilter!, start: Int!=0, amount: Int!=5): [Course!]!

    content(id: String!): Content!
    contents(start:Int !=0, amount: Int!=5): [Content!]!
    contentByFilter(filter: CourseFilter!, start: Int!=0, amount: Int!=5): [Content!]!

    comment(id:String!): Comment!
    commentByFilter(filter:CommentFilter!, start: Int!=0, amount: Int!=5): [Comment!]!

    attachment(id: String!): Attachment!
    attachments(courseID: String!, start: Int!=0, amount: Int!=5): [Attachment!]!

    pending(id: String!): Pending!
    pendingByFilter(filter: PendingFilter!, start: Int!=0, amount: Int!=5): [Pending!]!
}

input TargetUser{
    username: String!
    password: String!
    name: String
    email: String
}

input EditedUser {
    username: String
    password: String
    name: String
    email: String
}

input Login {
    username: String!
    password: String!
}

type Token{
    token:String!
}

input TargetCourse{
    title: String!
    summary: String
}

input EditedCourse{
    title: String
    summary: String
}

input TargetContent{
    title: String!
    description: String
    vurl: String!
    tags: [String!]
}

input EditContent{
    title: String
    description: String
    vurl: String
    tags: [String!]
}

input TargetPending{
    title: String!
    description: String
    furl: String!
}

input EditedPending{
    title: String
    description: String
    furl: String
}

input ChangedPending{
    title: String
    description: String
}

input TargetComment{
    body: String!
}

input EditedComment{
    body: String
}

interface Exception{
    message: String!
}
type InternalServerException implements Exception{
    message:String!
}
type AllFieldsEmptyException implements Exception{
    message: String!
}
type DuplicateUsernameException implements Exception{
    message:String!
}
type UserNotFoundException implements Exception{
    message:String!
}
type UserNotAllowedException implements Exception{
    message:String!
}
type UserPassMissMatchException implements Exception{
    message:String!
}
type CourseNotFoundException implements Exception{
    message: String!
}
type IncorrectTokenException implements Exception{
    message: String!
}
type UserIsNotTAException implements Exception{
    message: String!
}
type UserIsNotSTDException implements Exception{
    message: String!
}
type ContentNotFoundException implements Exception{
    message: String!
}
type AttachmentNotFoundException implements Exception{
    message: String!
}
type PendingNotFoundException implements Exception{
    message: String!
}
type OfferedContentRejectedException implements Exception{
    message: String!
}
type CommentNotFoundException implements Exception{
    message: String!
}

union CreateUserPayload = User | DuplicateUsernameException | InternalServerException
union UpdateUserPayload = User | UserNotFoundException | UserNotAllowedException | AllFieldsEmptyException | InternalServerException
union DeleteUserPayload = User | UserNotFoundException | UserNotAllowedException | InternalServerException
union LoginPayload = Token | UserPassMissMatchException | InternalServerException

union CreateCoursePayload = Course | UserNotFoundException | InternalServerException
union UpdateCourseInfoPayload = Course | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | AllFieldsEmptyException | InternalServerException
union DeleteCoursePayload = Course | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | InternalServerException

union AddUserToCoursePayload = Course | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | IncorrectTokenException | InternalServerException
union PromoteToTAPayload = Course | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | UserIsNotSTDException | InternalServerException
union DemoteToSTDPayload = Course | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | UserIsNotTAException | InternalServerException

union UploadContentPayLoad = Content | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | InternalServerException
union EditContentPayLoad = Content | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | AllFieldsEmptyException | ContentNotFoundException | InternalServerException
union DeleteContentPayLoad = Content | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | ContentNotFoundException | InternalServerException

union UploadAttachmentPayLoad = Attachment | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | InternalServerException
union EditAttachmentPayLoad = Attachment | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | AllFieldsEmptyException | AttachmentNotFoundException | InternalServerException
union DeleteAttachmentPayLoad = Attachment | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | AttachmentNotFoundException | InternalServerException

union OfferContentPayLoad = Pending | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | InternalServerException
union EditOfferedContentPayLoad = Pending | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | AllFieldsEmptyException | PendingNotFoundException | InternalServerException
union DeleteOfferedContentPayLoad = Pending | UserNotFoundException | CourseNotFoundException | UserNotAllowedException | PendingNotFoundException | InternalServerException

union CreateCommentPayLoad = Comment | UserNotFoundException | ContentNotFoundException | UserNotAllowedException | InternalServerException
union EditCommentPayLoad = Comment | UserNotFoundException | ContentNotFoundException | UserNotAllowedException | AllFieldsEmptyException | CommentNotFoundException | InternalServerException
union DeleteCommentPayLoad = Comment | UserNotFoundException | ContentNotFoundException | UserNotAllowedException | CommentNotFoundException | InternalServerException
union ReplyCommentPayLoad = Comment | UserNotFoundException | ContentNotFoundException | UserNotAllowedException | CommentNotFoundException | InternalServerException


type Mutation {
    createUser(target:TargetUser!): CreateUserPayload!
    updateUser(userID:String!, toBe:EditedUser!): UpdateUserPayload! #todo implement with authentication & jwt tokens
    deleteUser(userID:String!): DeleteUserPayload! #todo implement with authentication & jwt tokens
    login(input: Login!): LoginPayload!
    refreshToken: LoginPayload!

    createCourse(userID:String!, target:TargetCourse!): CreateCoursePayload!  #todo implement with authentication & jwt tokens
    updateCourseInfo(userID:String!, courseID:String!, toBe:EditedCourse!): UpdateCourseInfoPayload! #todo implement with authentication & jwt tokens
    deleteCourse(userID:String!, courseID:String!): DeleteCoursePayload! #todo implement with authentication & jwt tokens

    addUserToCourse(userID:String!, courseID:String!, token:String!): AddUserToCoursePayload! #todo implement with authentication & jwt tokens
    promoteUserToTA(userID:String!, courseID:String!, targetUserID:String!): PromoteToTAPayload! #todo implement with authentication & jwt tokens
    demoteUserToSTD(userID:String!, courseID:String!, targetUserID:String!): DemoteToSTDPayload! #todo implement with authentication & jwt tokens

    uploadContent(userID:String!, courseID:String!, target:TargetContent!): UploadContentPayLoad! #todo implement with authentication & jwt tokens
    editContent(userID:String!, courseID:String!, contentID:String!, target:EditContent!): EditContentPayLoad! #todo implement with authentication & jwt tokens
    deleteContent(userID:String!, courseID:String!, contentID:String!): DeleteContentPayLoad! #todo implement with authentication & jwt tokens

    uploadAttachment(userID:String!, courseID:String!, target:TargetContent!): UploadAttachmentPayLoad! #todo implement with authentication & jwt tokens
    editAttachment(userID:String!, courseID:String!, attachmentID:String!, target:EditContent!): EditAttachmentPayLoad! #todo implement with authentication & jwt tokens
    deleteAttachment(userID:String!, courseID:String!, attachmentID:String!): DeleteAttachmentPayLoad! #todo implement with authentication & jwt tokens

    offerContent(userID:String!, courseID:String!, target:TargetPending!): OfferContentPayLoad! #todo implement with authentication & jwt tokens
    editOfferedContent(userID:String!, courseID:String!, pendingID:String!, target:EditedPending!): EditOfferedContentPayLoad! #todo implement with authentication & jwt tokens
    deleteOfferedContent(userID:String!, courseID:String!, pendingID:String!): DeleteOfferedContentPayLoad! #todo implement with authentication & jwt tokens
    acceptOfferedContent(userID:String!, courseID:String!, pendingID:String!, changed:ChangedPending!): EditOfferedContentPayLoad! #todo implement with authentication & jwt tokens
    rejectOfferedContent(userID:String!, courseID:String!, pendingID:String!): DeleteOfferedContentPayLoad! #todo implement with authentication & jwt tokens

    createComment(userID:String!, contentID:String!, target:TargetComment!): CreateCommentPayLoad! #todo implement with authentication & jwt tokens
    updateComment(userID:String!, contentID:String!, commentID:String!, target:EditedComment!): EditCommentPayLoad! #todo implement with authentication & jwt tokens
    deleteComment(userID:String!, contentID:String!, commentID:String!): DeleteCommentPayLoad! #todo implement with authentication & jwt tokens
    replyComment(userID:String!, contentID:String!, commentID:String!, target:TargetComment!): ReplyCommentPayLoad! #todo implement with authentication & jwt tokens
}